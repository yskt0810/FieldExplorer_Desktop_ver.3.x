<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:mq="com.mapquest.tilemap.*" creationComplete="onCC()" xmlns:events="org.osmf.events.*" xmlns:metadata="org.osmf.metadata.*">
	<fx:Declarations>
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
		
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="GeoEvent")]
		
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.adobe.protocols.dict.Database;
			import com.mapquest.LatLng;
			import com.mapquest.LatLngCollection;
			import com.mapquest.services.geocode.GeocoderEvent;
			import com.mapquest.services.geocode.GeocoderLocation;
			import com.mapquest.services.geocode.OpenGeocoder;
			import com.mapquest.tilemap.MapCorner;
			import com.mapquest.tilemap.MapCornerPlacement;
			import com.mapquest.tilemap.ShapeCollection;
			import com.mapquest.tilemap.Size;
			import com.mapquest.tilemap.TileMapEvent;
			import com.mapquest.tilemap.controls.inputdevice.MouseWheelZoomControl;
			import com.mapquest.tilemap.controls.shadymeadow.SMLargeZoomControl;
			import com.mapquest.tilemap.overlays.LineOverlay;
			import com.mapquest.tilemap.pois.Poi;
			import com.mapquest.tilemap.pois.PoiEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import fe.core.setup.FEDatabase;
			import fe.core.setup.FEDirectory;
			
			[Bindable] public var zoom:int;
			public var Database:FEDatabase;
			public var Directory:FEDirectory;
			public var DayRouteOverRay:LineOverlay;
			public var DayRouteOverRayFlag:Boolean;
			
			public var SinglePOI:Poi;
			public var SinglePOIFlag:Boolean;
			
			public var MultiPOI:ShapeCollection;
			public var MultiPOIFlag:Boolean;
			
			
			
			public var geocoder:OpenGeocoder;
			public var GeoCodeFlag:Boolean = false;
			
			[Bindable] public var TZ:Number;
			
			private var alResult:ArrayList;
			
			[Bindable] public var LogFiles:ArrayCollection;
			
			[Bindable] public var GEOCHANGEFLAG:Boolean = false;
			[Bindable] public var CURRENT_LAT:String;
			[Bindable] public var CURRENT_LON:String;
			[Bindable] public var CURRENT_FILE_ID:int;
			
			public var GeoEvent:Event;
			
			private function onCC():void{
				
				
				this.removeEventListener(FlexEvent.CREATION_COMPLETE,this.onCC);
				zoom = 15;
				MainMap.setCenter(new com.mapquest.LatLng(38.0,135.5),zoom);
				
				MainMap.addControl(new SMLargeZoomControl(),new MapCornerPlacement(MapCorner.TOP_RIGHT,new Size(20,35)));
				MainMap.addControl(new MouseWheelZoomControl());
				zoom = MainMap.zoom;
				
				geocoder = new OpenGeocoder(MainMap.tileMap);
				geocoder.addEventListener(GeocoderEvent.GEOCODE_RESPONSE,onGeocodeResponse);
				geocoder.addEventListener(GeocoderEvent.GEOCODE_ERROR_EVENT,onGeocodeError);
				geocoder.addEventListener(GeocoderEvent.HTTP_ERROR_EVENT,onHttpError);
				if(geocoder.configured){
					onGeocoderReady(null);
				}else{
					geocoder.addEventListener(GeocoderEvent.GEOCODER_READY,onGeocoderReady);
				}
				
				getLogFileList();
				
			}
			
			public function getLogFileList():void{
				
				Database = new FEDatabase();
				Database.stmt.sqlConnection = Database.ConnectGPSDB;
				Database.stmt.text = "SELECT logfile_id,log_filename,log_filelabel FROM GPSLogFile; ";
				Database.stmt.execute();
				
				LogFiles = new ArrayCollection();
				
				var res:ArrayCollection = new ArrayCollection(Database.stmt.getResult().data);
				for (var i:int = 0; i<res.length; i++){
					var items:Object = new Object();
					items.log_fileid = res[i].log_fileid;
					items.log_filename = res[i].log_filename;
					items.log_filelabel = res[i].log_filelabel;
					
					LogFiles.addItem(items);
				}
					
			}
			
			
			public function LogRouteMapping(log:ArrayCollection):void{
				
				DayRouteOverRay = new LineOverlay();
				DayRouteOverRay.borderWidth = 3;
				DayRouteOverRay.color = 0x0033AF;
				
				if(DayRouteOverRayFlag){
					MainMap.removeShapes();
					DayRouteOverRayFlag = false;
				}
				
				if(GeoCodeFlag){
					
					MainMap.removeShapes();
					GeoCodeFlag = false;
				}
				
				if(MultiPOIFlag){
					MainMap.removeShapeCollection(MultiPOI);
					MultiPOIFlag = false;
				}
				
				InputGeocode.text = "";
				
				var shapePts:LatLngCollection = new LatLngCollection();
				
				for each(var LogData:Object in log){
					var latlng:LatLng = new LatLng();
					latlng.setLatLng(Number(LogData.Latitude),Number(LogData.Longitude));
					shapePts.add(latlng);
				}
				
				DayRouteOverRay.shapePoints = (shapePts);
				MainMap.setCenter(shapePts[0],zoom);
				
				if(!DayRouteOverRayFlag){
					MainMap.addShape(DayRouteOverRay);
					DayRouteOverRayFlag = true;
				}
				
			}
			
			
			
			public function DayRouteMapping(date:Date):void{
					
				Database = new FEDatabase();
				Database.stmt.sqlConnection = Database.ConnectGPSDB;
				
				var SelectDate:Date = new Date(date);
				Database.stmt.text = "SELECT id,date,Latitude,Longitude FROM GPSLog " +
					"WHERE (date - " + TZ + ") >= " + SelectDate.time + 
					" AND (date - " + TZ + ") <= " + (SelectDate.time + 86400000) +
					" ORDER BY date;";
				Database.stmt.execute();
				
				var result:SQLResult = Database.stmt.getResult();
				
				if(result.data != null){
					DayRouteOverRay = new LineOverlay();
					DayRouteOverRay.borderWidth = 3;
					DayRouteOverRay.color = 0x0033AF;
					
					if(DayRouteOverRayFlag){
						MainMap.removeShapes();
						DayRouteOverRayFlag = false;
					}
					
					if(GeoCodeFlag){
						
						MainMap.removeShapes();
						GeoCodeFlag = false;
					}
					
					if(MultiPOIFlag){
						MainMap.removeShapeCollection(MultiPOI);
						MultiPOIFlag = false;
					}
					
					InputGeocode.text = "";
					
					var shapePts:LatLngCollection = new LatLngCollection();
					
					for each(var LogData:Object in result.data){
						var latlng:LatLng = new LatLng();
						latlng.setLatLng(Number(LogData.Latitude),Number(LogData.Longitude));
						shapePts.add(latlng);
					}
					
					DayRouteOverRay.shapePoints = (shapePts);
					MainMap.setCenter(shapePts[0],zoom);
					
					if(!DayRouteOverRayFlag){
						MainMap.addShape(DayRouteOverRay);
						DayRouteOverRayFlag = true;
					}
					

				}
								
			}
			
			public function SinglePOISetting(Lat:Number,Lon:Number):void{
				
				if(SinglePOIFlag){
					MainMap.removeShapes();
					SinglePOIFlag = false;
					
				}
				
				if(GeoCodeFlag){
					MainMap.removeShapes();
					GeoCodeFlag = false;
				}
				
				if(MultiPOIFlag){
					MainMap.removeShapeCollection(MultiPOI);
					MultiPOIFlag = false;
				}
				
				InputGeocode.text = "";
				
				MainMap.setCenter(new LatLng(Lat,Lon));
				SinglePOI = new Poi(MainMap.center);
				SinglePOI.draggable = true;
				SinglePOI.addEventListener("dragend",onMapDragged);
	
				
				if(!SinglePOIFlag){
					
					MainMap.zoom = zoom;
					MainMap.addShape(SinglePOI);
					SinglePOIFlag = true;
				}
				
				
			}
			
			public function SetSinglePOIonMapCenter():void{
				
				if(SinglePOIFlag){
					MainMap.removeShapes();
					SinglePOIFlag = false;
				}
				if(GeoCodeFlag){
					MainMap.removeShapes();
					GeoCodeFlag = false;
				}
				
				if(MultiPOIFlag){
					MainMap.removeShapeCollection(MultiPOI);
					MultiPOIFlag = false;
				}
				
				InputGeocode.text = "";
				
				SinglePOI = new Poi(MainMap.center);
				
				SinglePOI.draggable = true;
				SinglePOI.addEventListener("dragend",onMapDragged);
				
				if(!SinglePOIFlag){
					
					MainMap.zoom = zoom;
					MainMap.addShape(SinglePOI);
					MainMap.setCenter(SinglePOI.latLng);
					SinglePOIFlag = true;
					InputGeocode.text = String(SinglePOI.latLng.lat) + "," + String(SinglePOI.latLng.lng);
					CURRENT_LAT = String(SinglePOI.latLng.lat);
					CURRENT_LON = String(SinglePOI.latLng.lng);
				}
				
			}
			
			public function SetMultiPOI(Target:ArrayCollection):void{
				
				if(MultiPOIFlag){
					MainMap.removeShapeCollection(MultiPOI);
					MultiPOIFlag = false;
				}
				
				MultiPOI = new ShapeCollection();
				
				var i:int = 0;
				var tmplat:Number;
				var tmplng:Number;
				
				for each (var items:Object in Target){
					if(items.Latitude != ""){
						if(items.Longitude != ""){
							SinglePOI = new Poi(new LatLng(Number(items.Latitude),Number(items.Longitude)));
							SinglePOI.rolloverAndInfoTitleText = items.file_label;
							//SinglePOI.latLng();
							MultiPOI.add(SinglePOI);
							if(i==0){
								tmplat = SinglePOI.latLng.lat;
								tmplng = SinglePOI.latLng.lng;
								i = i + 1;
							}
						}
					}
				}
				
				if(MultiPOI.length>0){
					
					if(!MultiPOIFlag){
						MainMap.addShapeCollection(MultiPOI);
						MultiPOIFlag = true;
						if(i>0){
							MainMap.setCenter(new LatLng(tmplat,tmplng),zoom);
						}
					}					
				}
			}
			
			
			private function onMapDragged(e:PoiEvent):void{
				
				if(SinglePOIFlag = true){

					InputGeocode.text = String(SinglePOI.latLng.lat) + ", " + String(SinglePOI.latLng.lng);
					CURRENT_LAT = String(SinglePOI.latLng.lat);
					CURRENT_LON = String(SinglePOI.latLng.lng);
					GEOCHANGEFLAG = true;
					
				}
				
				if(GEOCHANGEFLAG){
					
					Database.stmt.sqlConnection = Database.ConnectFileDB;
					Database.stmt.text = "UPDATE FWData SET Latitude = '" + CURRENT_LAT + 
						"', Longitude = '" + CURRENT_LON + "' WHERE file_id = " + CURRENT_FILE_ID + ";";
					Database.stmt.execute();
					
					GEOCHANGEFLAG = false;
					
					dispatchEvent(new Event("GeoEvent"));
				}
			}
			
			private function onGeocoderReady(e:GeocoderEvent):void{
				
				InputGeocode.editable = true;
				
			}
			
			private function doGeocode():void{
				
				this.cursorManager.setBusyCursor();
				
				if(DayRouteOverRayFlag){
					MainMap.removeShape(DayRouteOverRay);
					DayRouteOverRayFlag = false;
				}
				
				if(SinglePOIFlag){
					MainMap.removeShape(SinglePOI);
					SinglePOIFlag = false;
				}
				
				if(GeoCodeFlag){
					this.MainMap.removeShapes();
					GeoCodeFlag = false;
				}

				if(!GeoCodeFlag){
					this.geocoder.geocode(this.InputGeocode.text);	
				}
				
				
				
			}
			
			private function onGeocodeResponse(e:GeocoderEvent):void{
				
				alResult = new ArrayList();
				
				GeoCodeFlag = true;
				
				this.cursorManager.removeBusyCursor();
				
				for each (var loc:GeocoderLocation in e.geocoderResponse.locations){
					var o:Object = new Object();
					o.LatLng = loc.displayLatLng.lat + ", " + loc.displayLatLng.lng;
					o.GeocodeQuality = loc.geocodeQuality;
					o.GeocodeQualityCode = loc.geocodeQualityCode;
					this.alResult.addItem(o);
				}
				
			}
			
			private function onGeocodeError(e:GeocoderEvent):void{
				
				GeoCodeFlag = false;
				
				cursorManager.removeBusyCursor();
				makeErrorList("GEOCODER ERROR");
				
			}
			
			private function onHttpError(e:GeocoderEvent):void{
				
				GeoCodeFlag = false;
				
				cursorManager.removeBusyCursor();
				makeErrorList("HTTP ERROR");
				
			}
			
			private function makeErrorList(s:String):void{
				
				this.alResult = new ArrayList();
				
				var o:Object = new Object();
				o.LatLng = s;
				this.alResult.addItem(o);
				
			}
			
			
			
			private function zoomChange():void{
				if(zoom <= 18){
					zoom = MainMap.zoom;
				}
			}
			
			private function ZoomSet():void{
				if(InputZoom.text != ""){
					zoom = parseInt(InputZoom.text);
					if(zoom <= 18){
						MainMap.zoom = zoom;
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" gap="0" id="MapContainer">
		<s:HGroup width="100%" height="25" verticalAlign="middle" gap="0" id="MapControl">
			<!-- <mx:DateField id="ChoosedDate" width="120" height="25" chromeColor="0x333333" contentBackgroundColor="0x333333" color="0x66FFFF" change="DayRouteMapping(ChoosedDate.selectedDate);" /> -->
			<s:TextInput enter="doGeocode();" id="InputGeocode" borderVisible="false" contentBackgroundColor="#222222" width="100%" height="25" color="0x66FFFF" />
			<s:DropDownList borderVisible="false" cornerRadius="0" chromeColor="#000000"
							id="LogFileList" dataProvider="{LogFiles}" labelField="log_filelabel" color="#FFFFFF" width="170" height="25" contentBackgroundColor="#000000" />
			
			<s:Label text="Zoom Level: " color="0x66FFFF" width="100" height="25" textAlign="right" verticalAlign="middle" backgroundColor="0x333333" />
			<s:TextInput borderVisible="false" text="{zoom}" id="InputZoom" width="25" height="25" textAlign="center"
						 contentBackgroundColor="0x333333" color="0x66FFFF" enter="ZoomSet();" />
		</s:HGroup>
		<mq:TilemapComponent width="100%" height="100%" id="MainMap" key="Fmjtd%7Cluur2061l9%2C8a%3Do5-9aynhu" zoomend="zoomChange();" />
	</s:VGroup>
	
	
</s:Group>
